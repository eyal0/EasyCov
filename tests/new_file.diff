commit 83aae08805c3a5f58f384d3502956d1fa1824d56
Author: eyal0 <109809+eyal0@users.noreply.github.com>
Date:   Tue Dec 17 17:02:29 2019 -0500

    Add the DiffMapper for finding mapping from target to source lines.

diff --git easycov/diff_mapper.py easycov/diff_mapper.py
new file mode 100644
index 0000000..e60e3e3
--- /dev/null
+++ easycov/diff_mapper.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python2
+"""Parse a diff and allow mapping from source to target line numbers."""
+
+from __future__ import division
+from __future__ import print_function
+import bisect
+from collections import defaultdict
+from unidiff import PatchSet
+
+class DiffMapper(object):
+  """DiffMapper maps from target lines to source lines."""
+
+  def __init__(self, mapping=None):
+    self._mapping = mapping or defaultdict(list)
+
+  @staticmethod
+  def _add_row_to_mapping(mapping, new_row):
+    """Add a row.  If the last row can be rewritten, do that instead."""
+    if not mapping:
+      mapping.append(new_row)
+      return
+    if new_row[2] is None and mapping[-1][2] is None:
+      return # There is nothing to do.
+    if (new_row[2] is None) != (mapping[-1][2] is None):
+      mapping.append(new_row)
+      return
+    if new_row[0] - mapping[-1][0] == new_row[2] - mapping[-1][2]:
+      return # There is nothing to do.
+    mapping.append(new_row)
+
+
+  @staticmethod
+  def from_filename(filename):
+    """Reads diff from the filename provided.
+
+    This fills self._mapping with a mapping for each file the represents that
+    map from target filename and line number to source filename and line number.
+    """
+    patch = PatchSet.from_filename(filename)
+    mapping = defaultdict(list)
+    for patched_file in patch:
+      source_path = patched_file.source_file
+      target_path = patched_file.target_file
+      source_current = 0
+      target_current = 0
+      for hunk in patched_file:
+        source_start = hunk.source_start
+        target_start = hunk.target_start
+        if source_start - source_current != target_start - target_current:
+          raise ValueError("Malformed patch is missing a hunk.")
+        new_row = (target_current,
+                   source_path,
+                   source_current)
+        DiffMapper._add_row_to_mapping(mapping[target_path], new_row)
+        for line in hunk:
+          if line.target_line_no is not None:
+            DiffMapper._add_row_to_mapping(mapping[target_path],
+                                           (line.target_line_no,
+                                            source_path,
+                                            line.source_line_no))
+        source_current = source_start + hunk.source_length
+        target_current = target_start + hunk.target_length
+      new_row = (target_current,
+                 source_path,
+                 source_current)
+      DiffMapper._add_row_to_mapping(mapping[target_path], new_row)
+    return DiffMapper(mapping)
+
+  def __getitem__(self, filename):
+    def _get(mapping, line_number):
+      index = bisect.bisect_right([x[0] for x in mapping], line_number) - 1
+      index = max(index, 0)
+      entry = self._mapping[filename][index]
+      if entry[2] is None:
+        return (entry[1], None)
+      offset = line_number - entry[0]
+      return (entry[1], entry[2] + offset)
+
+    return type('', (object,), {
+        '__getitem__': lambda _, line_number: _get(self._mapping[filename], line_number)
+    })()
diff --git setup.py setup.py
index 00cd81f..036a68f 100755
--- setup.py
+++ setup.py
@@ -9,6 +9,5 @@ setup(
     packages=find_packages(exclude=["tests",]),
     license='MIT',
     long_description=open('README.md').read(),
-    install_requires=['lcovparse'],
-    scripts=["bin/easycov"],
+    install_requires=['lcovparse', 'unidiff'],
 )
